apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongdb-deployment
spec:
  selector:
    matchLabels:
      app: mongodb-pod
  replicas: 1
  template: #template for pods
    #we don't need a name under metatdata for the
    #pod but a label is needed since selectors rely on them
    metadata:
      labels:
        app: mongodb-pod
    spec:
      containers:
        - name: mongodb
          image: mongo:3.6.5-jessie
          # Below is an example of setting a readines probe but this is an example not actual implementation for this container
          
          # readinessProbe:
          #   httpGet:
          #     path: / # for webservers you need to create an endpoint to be called so as to test readiness
          #     port: 8080

          # LOOK UP ALSO HOW TO CONFIGURE LIVENESS PROBE WHERE NEEDED


          # remember to use qos rules as given here
          # https://www.udemy.com/course/kubernetes-microservices/learn/lecture/14727688#overview
          # https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/
          # https://medium.com/google-cloud/quality-of-service-class-qos-in-kubernetes-bb76a89eb2c6
          resources:
            requests:
              memory: "300Mi"
              cpu: "100m"
            limits:
              memory: "300Mi"
              cpu: "100m"
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
          # used to load key value pairs in a config map so that they can be used by the containers as environment variables
          envFrom:
            # to use config map
            - configMapRef:
                name: global-config-v1
            # to use secrets
            - secretRef:
                name: global-credentials-v1
      volumes:
        - name: mongo-persistent-storage
          # pointer to the configuration of what do we want  in
          # fleetman-kubernetes-cluster/persistent-volume-claims/local-storage.yaml
          persistentVolumeClaim:
            claimName: new-mongo-pvc

# The resources limits(resources limit section) should be the same or higher than the resourses requests (resources - request section)
# Requests are important to help the scheduler make intelligent decisions on which node to place the pod
# Limits are important to prevent the container from taking up all the memory in a cluster node since this can lead to cluster failure


#to deploy the pod to kubectl : - kubectl apply -f <deployment file name>

#to view rollout of a deployment - kubectl rollout status deploy <deployment name>

#to view rollout history of a deployment - kubectl rollout history deploy <deployment name>

#to  rollout to  a previous version of a deployment - kubectl rollout undo deploy <deployment name> --to-revision=<revion name>

#view deployment info :- kubectl describe <deployment name>

#Execute command in kubernetes pod :- kubectl exec <pod name> <command e.g ls>

#Interact with shell on pods container :- kubectl -it exec <container name> sh
