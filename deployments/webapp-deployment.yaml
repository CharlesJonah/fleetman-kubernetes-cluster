apiVersion: apps/v1
kind: Deployment
metadata:
  name: fleetman-webapp-deployment
spec:
  minReadySeconds: 30
  selector:
    matchLabels:
      app: fleetman-webapp-pod
  replicas: 1
  template: #template for pods
    #we don't need a name under metatdata for the
    #pod but a label is needed since selectors rely on them
    metadata:
      labels:
        app: fleetman-webapp-pod
    spec:
      containers:
        - name: fleetman-webapp
          image: richardchesterwood/k8s-fleetman-webapp-angular:release2

          # Below is an example of setting a readines probe but this is an example not actual implementation for this container

          # readinessProbe:
          #   httpGet:
          #     path: / # for webservers you need to create an endpoint to be called so as to test readiness
          #     port: 8080

          # LOOK UP ALSO HOW TO CONFIGURE LIVENESS PROBE WHERE NEEDED
          resources:
            requests:
              memory: "300Mi"
              cpu: "300m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: production-microservice
           # used to load key value pairs in a config map so that they can be used by the containers as environment variables
          envFrom:
            # to use config map
            - configMapRef:
                name: global-config-v1
            # to use secrets
            - secretRef:
                name: global-credentials-v1

# The resources limits(resources limit section) should be the same or higher than the resourses requests (resources - request section)
# Requests are important to help the scheduler make intelligent decisions on which node to place the pod
# Limits are important to prevent the container from taking up all the memory in a cluster node since this can lead to cluster failure

#to deploy the pod to kubectl : - kubectl apply -f <deployment file name>

#to view rollout of a deployment - kubectl rollout status deploy <deployment name>

#view deployment info :- kubectl describe <deployment name>

#Execute command in kubernetes pod :- kubectl exec <pod name> <command e.g ls>

#Interact with shell on pods container :- kubectl -it exec <container name> sh
